const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const DATA_FILE = path.join(__dirname, 'vacations.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
function loadData() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = fs.readFileSync(DATA_FILE, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
  return { vacations: {} };
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
function saveData(data) {
  try {
    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Öz.:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–Ω—ã–º –¥–Ω–µ–º
function isWeekend(date) {
  const day = date.getDay();
  return day === 0 || day === 6; // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ —Å—É–±–±–æ—Ç–∞
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
function getDayName(date) {
  const days = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
  return days[date.getDay()];
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(date) {
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${day}.${month}.${year}`;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ (—Ñ–æ—Ä–º–∞—Ç DD.MM)
function parseDate(dateStr, year = new Date().getFullYear()) {
  const [day, month] = dateStr.split('.');
  return new Date(year, parseInt(month) - 1, parseInt(day));
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
function parseDateRange(dateStr) {
  const dates = [];
  
  if (dateStr.includes(' –ø–æ ')) {
    // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: "16.08 –ø–æ 25.08"
    const [startStr, endStr] = dateStr.split(' –ø–æ ');
    const startDate = parseDate(startStr.trim());
    const endDate = parseDate(endStr.trim());
    
    for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
      dates.push(new Date(d));
    }
  } else {
    // –°–ø–∏—Å–æ–∫ –¥–∞—Ç: "16.08 17.08"
    const dateStrings = dateStr.trim().split(/\s+/);
    for (const dateString of dateStrings) {
      if (dateString.match(/^\d{1,2}\.\d{1,2}$/)) {
        dates.push(parseDate(dateString));
      }
    }
  }
  
  return dates;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
function checkLimits(data, dates, userName) {
  const currentYear = new Date().getFullYear();
  const errors = [];
  
  for (const date of dates) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞
    if (date.getFullYear() !== currentYear) {
      errors.push(`–í—ã—Ö–æ–¥–Ω—ã–µ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ ${currentYear} –≥–æ–¥—É`);
      continue;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (30 –¥–Ω–µ–π)
    const today = new Date();
    const diffTime = date.getTime() - today.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0 || diffDays > 30) {
      errors.push(`–í—ã—Ö–æ–¥–Ω—ã–µ –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π`);
      continue;
    }
    
    const dateStr = formatDate(date);
    const existingVacations = data.vacations[dateStr] || [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    const isWeekendDay = isWeekend(date);
    const maxAllowed = isWeekendDay ? 3 : 2;
    
    if (existingVacations.length >= maxAllowed) {
      const dayType = isWeekendDay ? '–≤—ã—Ö–æ–¥–Ω—ã–µ' : '–±—É–¥–Ω–∏';
      errors.push(`${getDayName(date)} ${dateStr} ‚Äî –ª–∏–º–∏—Ç –≤ ${dayType} –∏—Å—á–µ—Ä–ø–∞–Ω (–º–∞–∫—Å–∏–º—É–º ${maxAllowed} —á–µ–ª–æ–≤–µ–∫)`);
    }
  }
  
  return errors;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö
function addVacations(data, dates, userName) {
  for (const date of dates) {
    const dateStr = formatDate(date);
    if (!data.vacations[dateStr]) {
      data.vacations[dateStr] = [];
    }
    
    if (!data.vacations[dateStr].includes(userName)) {
      data.vacations[dateStr].push(userName);
    }
  }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö
function removeVacations(data, dates, userName) {
  for (const date of dates) {
    const dateStr = formatDate(date);
    if (data.vacations[dateStr]) {
      data.vacations[dateStr] = data.vacations[dateStr].filter(name => name !== userName);
      if (data.vacations[dateStr].length === 0) {
        delete data.vacations[dateStr];
      }
    }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã—Ö–æ–¥–Ω—ã—Ö
function formatVacationCalendar(data) {
  const today = new Date();
  const calendar = [];
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 30 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
  for (let i = 0; i < 30; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    
    const dateStr = formatDate(date);
    const dayName = getDayName(date);
    const vacations = data.vacations[dateStr] || [];
    
    const isWeekendDay = isWeekend(date);
    const maxAllowed = isWeekendDay ? 3 : 2;
    const isOverLimit = vacations.length > maxAllowed;
    
    const status = isOverLimit ? '‚ùå' : '‚úÖ';
    const names = vacations.length > 0 ? vacations.join(', ') : '–ù–∏–∫—Ç–æ';
    
    calendar.push(`${dayName} ${dateStr} ‚Äî ${names} ${status}`);
  }
  
  return `üìÖ –¢–µ–∫—É—â–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ:\n${calendar.join('\n')}`;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
function processCommand(message) {
  const text = message.text.toLowerCase().trim();
  const userName = message.from.first_name;
  const chatId = message.chat.id;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  if (text === '/start') {
    return '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã–º–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
           '/–∫–∞–ª–µ–Ω–¥–∞—Ä—å - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤—ã—Ö–æ–¥–Ω—ã—Ö\n' +
           '–≤—ã—Ö–æ–¥–Ω–æ–π DD.MM.YYYY –ò–º—è - –¥–æ–±–∞–≤–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π\n' +
           '–æ—Ç–º–µ–Ω–∞ DD.MM.YYYY –ò–º—è - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π\n' +
           '–æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –ò–º—è - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ';
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥—ã /start)
  if (message.chat.type !== 'group' && message.chat.type !== 'supergroup') {
    return '–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö';
  }
  
  const data = loadData();
  
  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  if (text === '/–∫–∞–ª–µ–Ω–¥–∞—Ä—å' || text === '/calendar' || text === '–∫–∞–ª–µ–Ω–¥–∞—Ä—å') {
    return formatVacationCalendar(data);
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö
  if (text.includes('–æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö')) {
    const nameMatch = text.match(/–æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö\s+(.+)/);
    if (nameMatch) {
      const targetName = nameMatch[1].trim();
      const allDates = Object.keys(data.vacations);
      const datesToRemove = allDates.map(dateStr => {
        const [day, month, year] = dateStr.split('.');
        return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
      });
      
      removeVacations(data, datesToRemove, targetName);
      saveData(data);
      return `–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è ${targetName}`;
    }
  }
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö
  if (text.includes('–æ—Ç–º–µ–Ω–∞')) {
    const nameMatch = text.match(/–æ—Ç–º–µ–Ω–∞\s+(?:–≤—ã—Ö–æ–¥–Ω—ã—Ö\s+)?(.+)/);
    if (nameMatch) {
      const rest = nameMatch[1].trim();
      const nameMatch2 = rest.match(/(.+?)\s+(.+)$/);
      if (nameMatch2) {
        const dateStr = nameMatch2[1].trim();
        const targetName = nameMatch2[2].trim();
        
        const dates = parseDateRange(dateStr);
        if (dates.length > 0) {
          removeVacations(data, dates, targetName);
          saveData(data);
          return `–£–¥–∞–ª–µ–Ω—ã –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è ${targetName}`;
        }
      }
    }
  }
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö
  const nameMatch = text.match(/(?:–≤—ã—Ö–æ–¥–Ω–æ–π\s+)?(.+?)\s+(.+)$/);
  if (nameMatch) {
    const dateStr = nameMatch[1].trim();
    const targetName = nameMatch[2].trim();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è
    if (!dateStr.includes('–æ—Ç–º–µ–Ω–∞')) {
      const dates = parseDateRange(dateStr);
      if (dates.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        const errors = checkLimits(data, dates, targetName);
        if (errors.length > 0) {
          return errors.join('\n');
        }
        
        addVacations(data, dates, targetName);
        saveData(data);
        return `–î–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–ª—è ${targetName}`;
      }
    }
  }
  
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö.';
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook
module.exports = async (req, res) => {
  if (req.method === 'POST') {
    try {
      const update = req.body;
      
      if (update.message) {
        const response = processCommand(update.message);
        
        await bot.sendMessage(update.message.chat.id, response);
      }
      
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  } else {
    res.status(200).json({ message: 'Ozon Bot is running!' });
  }
};
